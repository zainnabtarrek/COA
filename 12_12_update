// Structural descriptions for full adder.
module full_adder(output sum, output carry, input a, input b, input c_in);
    // Declare wires for intermediate signals
    wire s1, c1, c2;
    // XOR gate to compute the sum bit
    xor(s1, a, b);
    // XOR gate to combine the previous sum and carry-in to get the final sum
    xor(sum, s1, c_in);
    // AND gate to compute the carry-out from input bits a and b
    and(c1, a, b);
    // AND gate to compute the carry-out from the previous sum and carry-in
    and(c2, s1, c_in);
    // OR gate to combine the two carry-out signals and get the final carry-out
    or(carry, c1, c2);
endmodule
// Structural descriptions for Multiplexer .
module mux(output y, input i0,  i1,  i2,  i3,  s0, s1);
    // Declare wires for intermediate signals
    wire w1 , w2 , w3 ,w4 ;
    // AND gate for the first input line
    and  (w1, i0, ~s1,~s0);
    // AND gate for the second input line
    and  (w2 ,i1, ~s1, s0);
    // AND gate for the third input line
    and  (w3, i2, s1, ~s0);
    // AND gate for the fourth input line
    and  (w4, i3, s1, s0);
    // OR gate to combine the outputs of the AND gates
    or   (y,w1,w2,w3,w4);
endmodule
module circuit (output  fa1,fa2,fa3, input s1,s0,i00,i01,i02,i03,i10,i11,i12,i13,i20,i21,i22,i23,i30,i31,i32,i33,i40,i41,i42,i43,i50,i51,i52,i53) ;
    // Declare wires for intermediate signals
    wire carry1,carry2,carry3, nots0,XOR1,XOR2,XOR3,MUX0,MUX1,MUX2, MUX3,MUX4,MUX5;
    // Instantiate 4-to-1 multiplexer 0
    mux mux0 (MUX0,i00,i01,i02,i03,s1,s0);
    // Instantiate 4-to-1 multiplexer 1
    mux mux1 (MUX1,i10,i11,i12,i13,s1,s0);
    // Instantiate 4-to-1 multiplexer 2
    mux mux2(MUX2,i20,i21,i22,i23,s1,s0);
    // Instantiate 4-to-1 multiplexer 3
    mux mux3(MUX3,i30,i31,i32,i33,s1,s0);
    // Instantiate 4-to-1 multiplexer 4
    mux mux4(MUX4,i40,i41,i42,i43,s1,s0);
    // Instantiate 4-to-1 multiplexer 5
    mux mux5(MUX5,i50,i51,i52,i53,s1,s0);
    // Compute XOR gate for s1 mux0
    xor (XOR1,s1,MUX0);
    // Compute XOR gate for s1 mux1
    xor(XOR2,s1,MUX1);
    // Compute XOR gate for s1 mux2
    xor (XOR3,s1,MUX2);
    // Instantiate full adder for carry1 XOR1 MUX3 s1
    full_adder FA1 (fa1,carry1,XOR1,MUX3,s1);
    // Instantiate full adders carry2 XOR2 MUX carry1
    full_adder FA2 (fa2,carry2,XOR2,MUX4,carry1);
    // Instantiate full adders carry2 XOR2 MUX carry1
    full_adder FA3 (fa3,carry3,XOR3,MUX5,carry2);
endmodule 
module test ();
    // Declare input signals
    reg s0,s1,i00,i01,i02,i03,i10,i11,i12,i13,i20,i21,i22,i23,i30,i31,i32,i33,i40,i41,i42,i43,i50,i51,i52,i53 ;
    // Declare output signals
    wire fa1,fa2,fa3 ;
    // Declare input variables for A, and G
    reg [2:0] A;
    // Declare input variables for B
    reg [2:0] B;
    // Declare input variables for selectors
    reg [1:0] select;
    // Declare input variables for G
    reg [2:0] G;
    // Declare input equal fixed value of one bit = 1
    reg [0:0] one;
    // Declare and initialize clock signal
    reg clk = 0;
    // wait the clock every 5 time units
    always #5 clk = ~clk;
    // Declare an integer for test case iteration
    integer test_case;
    // Instantiate the circuit module
    circuit c (fa1,fa2,fa3,s0,s1,i00,i01,i02,i03,i10,i11,i12,i13,i20,i21,i22,i23,i30,i31,i32,i33,i40,i41,i42,i43,i50,i51,i52,i53);
    initial
    begin 
        // Provide 50 test cases
        for (test_case = 1; test_case <= 50; test_case = test_case + 1) begin
        // Randomize inputs
        A = $random % 8; // 3-bit signed value
        B = $random % 8; // 3-bit signed value
        select = $random % 4; // 2-bit value
        // wait time
        #5
        // display the tests bench
        $display("Test Case %0d:", test_case);
        $display("A = %b, B = %b, Select = %b", A, B, select);
        // Apply inputs
        // Set s0 to the value of the 'select 1' signal
        s0 = select[1]; 
        // Set s1 to the value of the 'select 0' signal
        s1 = select[0]; 
        // Assign input values for the 4-to-1 first multiplexer.
        i00=A[0] ; i01=A[0]; i02=A[0] ;  i03=B[0] ;
        // Assign input values for the 4-to-1 second  multiplexer.
        i10=A[1] ; i11=A[1] ; i12=A[1] ; i13=B[1] ;
        // Assign input values for the 4-to-1 third multiplexer.
        i20=A[2] ; i21=A[2] ; i22=A[2] ; i23=B[2]; 
        // Set fixed values for i30 , i33 to be = 1  for the 4-to-1 fourth multiplexer.
        i30=1 ; i31=B[0] ; i32=B[0] ; i33=1 ;
        // Set fixed values for i40 , i43 to be = 0  for the 4-to-1 fifth multiplexer.
        i40=0 ; i41=B[1]; i42=B[1] ; i43=0 ;
        // Set fixed values for i50 , i53 to be = 0 for the 4-to-1 sixth multiplexer.
        i50=0 ; i51=B[2] ; i52=B[2]; i53=0 ;
        // assign in reg one the value 1
        one = 1 ;
        case (select)
            //print Expected G = A + 1
            2'b00: $display("Expected G = A + 1 = %b", A + one);
            //print Expected G = A + B
            2'b01: $display("Expected G = A + B = %b", A + B);
            //print Expected G = B - A
            2'b10: $display("Expected G = B - A = %b", B - A);
            //print Expected G = 1 - B
            2'b11: $display("Expected G = 1 - B = %b", one - B);
        endcase
        // wait time to the input is applied.
        #5
        // output actual values 
        G[0] = fa1; G[1] = fa2; G[2] = fa3;
        $display("Actual G = %b\n", G);
        end
    $finish;
    end
endmodule
